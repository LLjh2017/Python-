2018  09.06  星期四


字符串的格式化表达式：
  作用：
    生成一定格式的字符串
  运算符：
    %
  语法格式：
    格式字符串 % 参数值
    格式字符串 % (参数值1,参数值2，...)
  说明：
    格式字符串中以%开头的字符为占位符
    占位符的位置将用参数值替换
  示例：
    fmt="姓名：%s,年龄：%d"
    name=input('请输入姓名:')  #xiaoli
    age=int(input('请输入年龄:'))  #20
    s=fmt%(name,age)
    print(s) #姓名：xiaoli 年龄：20


格式化字符串中的占位符和类型码
  %s  字符串，使用str(x)函数转换
  %r  字符串，使用repr(x)函数转换
  %c  整数转为单个字符
  %d  整数转为十进制整数
  %o  整数转为八进制整数
  %x  整数转为十六进制整数（字符a-f小写）
  %X  整数转为十六进制整数（字符A-F大写）
  %e  指数型浮点数（e小写） 如2.9e10
  %E  指数型浮点数（E大写） 如2.9E10
  %F %f 浮点数十进制形式
  %g %G 十进制形式或指数形式浮点数自动转换
  %%  等同于一个百分号



占位符和类型码之间的格式化语法
  格式：
    % - + 0 宽度  精度  类型码
  说明：
    -  左对齐 (默认是右对齐)
    +  显示正号
    0  左侧空白位置补0
    宽度：整个数据输出的宽度
    精度：保留小数点后多少位(默认6位)
  示例：
    "%10d"   %  123    #  '       123'
    "%-10d"   %  123   #  '123       '
    "%-+10d"   %  123  #  '+123      '
    "%10s"  %  'abc'   #  '       abc'
    "%-5s"  %  'abc'   #  'abc  '
    "%010d"   %  123   #  '0000000123'
    "%f"   %  12.34567890 # '12.3456789'
        （几点几的，点表示补位，小数后面的看齐）

练习：
  输入三行文字，让这三行文字依次以20个字符的宽度右对齐
  输出
  如：
    请输入第一行：hello beijing 
    请输入第二行：abcd
    请输入第三行：a
  输出结果：
          hello beijing
                   abcd
                      a 
  做完上面的题后在思考：
    能否以最长字符串的长度进行右对齐显示(左侧填充空格)
答案：
a='hello beijing'
b='abcd'
c='a'
print('%20s'%a)
print('%20s'%b)
print('%20s'%c)

max_len=max(len(a),len(b),len(c))
print(' '*(max_len-len(a))+a)
print(' '*(max_len-len(b))+b)
print(' '*(max_len-len(c))+c)

fmt="%"+str(max_len)+"s"
print(fmt %a)
print(fmt %b)
print(fmt %c)



循环语句：
  while 语句
  for  语句

例题：
  输入一个整数n，写程序打印如下n行文字
    这是第一行
    这是第二行
    .......
    这是第n行
答案：
n=int(input("输入一个整数:"))
i=1
while i<=n:
    print("这是第%d行"%i)
    i+=1
      
while语句：
  作用：
    根据一定条件，重复的执行一条语句或多条语句
  语法：
    while 真值表达式：
        语句块1(*此部分的语句可能会重复执行)
    else:
        语句块2
  说明：
    else 子句可以省略，和if类似
  执行步骤：
    1.先执行真值表达式，测试布尔值是否为True或False
    2.如果真值表达式测试为True，则执行语句块1，
      然后在回到第一步
    3.如果真值表达式测试为False，则执行else子句中的语句块2
      然后结束此while语句，如果没有else语句，则直接结束此while
      语句的执行
        

练习  
  1.写程序，打印1-20的整数，打印在一行显示，每个数字用
    空格分开
答案：
i=1
while i<=20:
    print(i,end=" ")
    i+=1
print() #换行

  2.打印1~20的整数，每行打印5个，打印4行
    如：
      1 2 3 4 5
      6 7 8 9 10
      11...
      ...
答案：
i=1
while i<=20:
    print(i,end=" ")
    if i%5==0:
        print()
    i+=1

练习：
  1.输入一个整数，打印一个宽度和高度都是n个字符的长方行
    如：
      输入:4
        ####
        #  #
        #  #
        ####
      输入:6
        ######
        #    #
        #    #
        #    #
        #    #
        ######
答案：
n=int(input('输入一个整数:'))
i=1
print('#'*n)
while i<=n-2:
    print('#'+' '*(n-2)+'#')
    i+=1
if n>1:
   print('#'*n) 

  2.写程序，计算：
    1+2+3+4...100 的和
    并打印结果
答案：
he=0
i=1
while i<=100:
    he+=i
    i+=1
print(he)

  3.写程序
    输入一个开始值用begin绑定
    输入一个结束值用end绑定
      计算：
      从begin开始，到end结束的所有整数的和
    如：
      请输入开始值：1
      请输入结束值：10
    打印： 
      和是：55
答案：
begin=int(input("请输入开始值："))
end=int(input("请输入结束值："))
he=0
while begin<=end:
    he+=begin
    begin+=1
print('和是：%d'%he)

  4.写一个程序
    输入一个开始值用变量begin绑定
    输入一个结束值用变量end绑定
    打印从begin开始到end结束的每个整数，打印在一行内
      如：
        请输入开始值：8
        请输入结束值：30
      打印： 
        8 9 10 11.....30
答案：
begin=int(input("请输入开始值："))
end=int(input("请输入结束值："))
i=begin
while i<=end:
    print(i,end=' ')
    i+=1
print() # 换行

    完成后思考：如何实现每5个整数打印在一行内，打印多行
    提示：可以多加一个变量来记录打印个数
答案：   
begin=int(input("请输入开始值："))
end=int(input("请输入结束值："))
i=begin
count=0 # 记录打印个数
while i<=end:
    print(i,end=' ')
    count+=1
    if count%5==0:
        print() # 换行
    i+=1
print() # 换行



while 注意事项：
  1.要控制循环的真值表达式来防止死循环
  2.通常在循环语句块内改变循环变量来控制循环次数和
    变量的走向

while 语句的嵌套
  while 语句本身也是语句,和其他语句一样,可以嵌套到任何
  复合语句中
  示例：　　
    while 真值表达式1:
        ....
        while 真值表达式2:
            ....　　
        else:　　
            ....
    else:
        ....
示例：
  打印1~20的整数，打印在一行内
    1 2 3 4...20
    打印20行
答案：
j=0
while j<20:
    i=1
    while i<=20:
        print(i,end=' ')
        i+=1
    print()
    j+=1 

练习：
  输入一个数，打印指定宽度的正方形
    如：
      输入：5
    打印： 
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5      
    如：
      输入：3
    打印：
      1 2 3
      1 2 3
      1 2 3
答案：
n=int(input('输入一个整数：'))
line=1   # 记录行数
while line<=n:
    i=1   # 每行打印的数字
    while i<=n:
        print(i,end=' ')
        i+=1  
    print()
    line+=1
    
break 语句
  问题：
    如果在循环过程中，不想在继续执行此循环的执行了，
    怎么办？
  作用:
    用于循环语句(while for 语句中)用来终止
    当前循环语句的执行
  说明：
    1.当break执行后，此循环语句内break之后的语句
      将不再执行。
    2.break通常和if语句组合使用
    3.break终止循环时，循环语句的else子句将
      不会被执行
    4.break语句只能终止当前循环语句的执行，如果有循环嵌套时，
      不会跳出外重循环


死循环  
  死循环是指条件一直成立的循环
  死循环通常用break语句来终止循环
  死循环的else子句永远不会执行
  死循环通常用在循环次数不确定的循环中

示例：
while True:
    n=int(input("请输入整数:"))
    if n==0:
        break
    print('您输入的是:',n)
print('程序结束')

练习：
  写一个程序，任意输入一些整数，当输入小于零的数时
  结束输入，当输入完成后，打印您输入的这些正整数的
  和： 
    如：
      请输入：1
      请输入：2
      请输入：3
      请输入：4
      请输入：-1
    打印：您刚才输入的这些正整数的和是：10 
答案：
he=0  # 此变量用来保存已经输入的数字的和
while True:
    n=int(input('任意输入一些整数:'))
    if n<0:
        break
    he+=n  # 累加
print('和是',he)


      
练习：
  1.打印从零开始的浮点数，每个数增加0.5，
    打印出10以内这样的数
    0.0 0.5 1.0 1.5 .....9.0 9.5
答案：
i=0
while i<10:
    print(i,end=' ')
    i+=0.5
print()

  2.写程序求：
    1/1+1/3+1/5+1/7+.......+1/99的和
答案：
he=0
fenmu=1
while fenmu<=100:
    he+=1/fenmu
    fenmu+=2
print(he)

  3.输入一个整数表示三角形的高度和宽度，打印出如下的三角形
    如：
      请输入三角形的宽度：4
    打印如下：
    *
    **
    ***
    ****
答案：
n=int(input('输入三角形的高度:'))
i=1
while i<=n:
    print('*'*i)
    i+=1

  4.写程序，输入一个整数代表正方形的宽和高，
    打印如下的正方形：
    如：
      输入宽度5
    打印正方形如下：
    1 2 3 4 5
    2 3 4 5 6
    3 4 5 6 7
    4 5 6 7 8
    5 6 7 8 9
    如：
      输入宽度：4
    打印正方形如下：
    1 2 3 4 
    2 3 4 5 
    3 4 5 6
    4 5 6 7
答案：
#方法1
n=int(input('输入正方形的高度:'))
i=0
while i<n:
    j=1
    while j<=n:
        print(i+j,end=' ')
        j+=1
    print()
    i+=1

#方法2
w=int(input('请输入宽度'))
line=1
while line<=w:
    # 以line为开始打印w个数，打印在一行内
    start=line # 开始值是行号
    while start<line+w:
        print(start,end=' ')
        # print('%02d'%start,end=' ')
        start+=1
    print() # 换行
    line+=1
