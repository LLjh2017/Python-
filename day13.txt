2018     09.19   星期三
 



自定义模块:
  要求:
    模块文件名后缀必须为.py结尾
    模块文件名必须是合法的标识符
    避免名称和内建模块名冲突
  导入方式:
    import 自定义模块名
    from   自定义模块名  import 属性 
    from   自定义模块名  import *
    
import 语句 搜索模块的路径顺序
  1.搜索内建模块
  2.搜索程序运行时的路径(当前工作目录)
  3.搜索sys.path提供的路径
    可以在sys.path里添加自定义的路径
    如：
      import sys 
      sys.path.append("/home/tarena")
      import mymod
      # 可以导入/home/tarena/mymod.py这个模块

模块化编程的优点:
  1.有利于多人合作开发
  2.使代码更加易于维护
  3.提高代码的复用率
  4.模块化编程有利于解决函数名和变量名冲突(模块
    内的变量的作用域为模块内全局)

模块的加载过程
  在模块导入时,模块的所有语句会执行
  如果一个模块已经导入,则再次导入时不会重新执行
  模块内的语句

模块的重新加载
  import mymod
  import imp
  imp.reload(mymod) # 重新加载mymod模块

模块被导入和执行的过程:
  1.搜索相关的路径找模块文件.py
  2.判断是否有此模块对应的.pyc文件
    如果pyc文件比.py文件新则直接加载.pyc文件,否则
    用.py文件重新生成.pyc文件并加载

pyc 模块的编译
          编译             执行
  mymod.py ---> mymod.pyc ---> python3

模块的预置属性
  __doc__属性
    绑定模块的文档字符串,模块的文档字符串是模块内第一个
    没有赋值给任何变量的字符串
  __file__属性
  __file__用来绑定模块所对应的文件路径名

  __name__属性
    作用:
      1.记录模块名
      2.用来判断是否为主模块
    说明:
      1.当此模块为主模块运行时,__name__绑定'__main__'
      2.当此模块不是主模块运行,而是被其它模块导入时,此模块名
        为模块文件.py前面的模块名
        如:mymod.py 的模块名为 mymod 
    注:
      主模块是指最先被python解释执行器执行的模块

模块的__all__列表
  __all__列表是一个用来存储可导入属性的字符串列表
  作用:
    限制用from xxx import * 语句导入时导入部分属性
    而不是全部属性

模块的隐藏属性:
  模块中以'_'开头的属性,在from xxx import *
  导入时将不被导入,通常称这些属性为隐藏属性

随机模块 random
  作用:
    用于模拟或生成随机输出的模块

练习：
  猜数字游戏：
    随机生成一个0~100之间的整数,用变量x绑定
    让用户输入一个数y,输出猜数字的结果
      1.如果y等于生成的数x,则提示"恭喜您猜对了",并退出程序
      2.如果y大于x,则提示"你猜大了",然后继续猜下一次
      3.如果y小于x,则提示"您猜小了",....
    直到猜对为止,最后显示用户猜数字的次数后退出程序
答案：
  import random as r
  x=r.randrange(101) # 0~100之间
  count=0 # 记录次数
  while True:
      y=int(input('请输入数字'))
      count+=1
      if y==x:
          print('恭喜您猜对了')
          break
      elif y>x:
          print('您猜大了') 
      else:
          print('您猜小了')
  print('您总共猜了%d次'%count)

     

包(模块包) package
  包是将模块以文件夹的组织形式进行分组管理的方法
  作用: 
    将一系列模块进行分类管理,有利于防止名字冲突,可以在
    需要时加载一个或部分模块而不是全部模块
  示例：
    mypack/
      __init__.py
      menu.py
      games/
        __init__.py
        contra.py
        supermario.py
        tanks.py
      office/
        __init__.py
        excel.py
        word.py
包的导入:
  同模块的导入规则基本相同
  语法:
    import 包名 [as 包别名]
    import 包名.模块名 [as 模块新名]
    import 包名.子包名.模块名 [as 模块新名]

    from 包名 import 模块名 [as 模块新名]
    from 包名.子包名 import 模块名 [as 模块新名]
    from 包名.子包名.模块名 import 属性名 [as 属性新名]

    from 包名 import *
    from 包名.模块名 import *

__init__.py 文件
  此文件是常规包内必须存在的文件,此文件会在包被导入时自动调用

  作用:
    编写此包的内容
    在内部填写包的文档字符串
    在__init__.py内可以加载此包所依赖的一些其它模块

包内的__all__列表
  作用:
    用来记录此包中有哪些子包或模块在from import * 语句
    导入时需要被导入
   说明:
    __all__列表只对from xxx import * 语句中起作用
    __all__ [contra,tanks]

包的相对导入:
  包的相对导入是指包内模块的相互导入
  语法:
   from 相对路径包或模块 import 属性或模块名
   或 from 相对路径包或模块 import*
  相对路径:
    . 代表当前目录
    ..代表上一级目录
    ...代表上两级目录
    ....以此类推
    注:相对导入时不能超出包的外部
    
注意避免循环导入:

包的加载路径:
  1.当前工作路径
  2.sys.path 提供的路径
    模块的加载路径设置方法:
      sys.path("新路径")

练习:
  1.模拟斗地主发牌,扑克牌54张
    花色:
    黑桃('\u2660'),梅花('\u2663'),红桃('\u2665')
    方块('\u2666')
    数字:
    A2-10JQK
    大王,小王
    三个人,每个人发17张牌,底牌留三张
      输入回车,打印第1个人的17张牌
      输入回车,打印第2个人的17张牌
      输入回车,打印第3个人的17张牌
      输入回车,打印3张底牌
答案：
import random
poke=['大王','小王']
kinds=['\u2660','\u2663','\u2665','\u2666']
numbers=['A']+[str(x) for x in range(2,11)]+list('JQK')
for k in kinds:
    for n in numbers:
        poke.append(k+n)
print(poke)
poke2=poke.copy()
# 洗牌
random.shuffle(poke2)
play1=poke2[:17]   # 发给玩家1
play2=poke2[17:34]   # 发给玩家2
play3=poke2[34:51]   # 发给玩家3
dipai=poke2[51:]   # 底牌
poke2.clear()
# 发牌
input("请输入回车键发给第一个人：")
print(play1)
input("请输入回车键发给第二个人：")
print(play2)
input("请输入回车键发给第三个人：")
print(play3)
input("请输入回车键发底牌：")
print(dipai)

  2.修改学生信息管理系统,拆分为模块
    要求:
      1.主事件循环放在main.py中
      2.show_menu函数放在menu.py中
      3.与学生操作相关的函数放在
        student_info中
1.main.py
# file : main.py
# 学生管理系统主模块

from menu import show_menu
from student_info import *

def main():
    infos=[] #用于保存学生信息的列表
    while True:
        # 打印菜单
        show_menu()
        s=input('请选择：')
        if s=='1':
            infos+=input_student()
        elif s=='2':
            print_student(infos)
        elif s=='3':
            remove_student(infos)
        elif s=='4':
            modify_score(infos)
        elif s=='5':
            print_score_desc(infos)
        elif s=='6':
            print_score_asc(infos)
        elif s=='7':
            print_age_desc(infos)
        elif s=='8':
            print_age_asc(infos)
        elif s=='q':
            break
main()

2.menu.py
# file:menu.py

def show_menu():
    print("+--------------------------------+")
    print('| 1)添加学生信息                 |')
    print('| 2)显示学生信息                 |') 
    print('| 3)删除学生信息                 |')
    print('| 4)修改学生成绩                 |')
    print('| 5)按学生成绩高-低显示学生信息  |')
    print('| 6)按学生成绩低-高显示学生信息  |')
    print('| 7)按学生年龄高-低显示学生信息  |')
    print('| 8)按学生年龄低-高显示学生信息  |')
    print('| q)退出                         |')
    print("+--------------------------------+")

3.student_info.py
# file:student_info
def input_student():
    L=[] #创建一个列表用来保存学生信息的字典
    #循环输入学生姓名，年龄，成绩，姓名为空时结束输入
    while True:
        n=input('请输入学生姓名:')
        if not n: #姓名为空时结束输入
            break
        # 让用户输入年龄，如果错误就重新输入
        # 如果没有错，则跳出循环，做后面的事
        while True:
            try:
                a=int(input('请输入年龄：'))
            except:
                print("您的输入有误，请重新输入")
                continue
            else:
                break
        try:
            s=int(input('请输入成绩：'))
        except:
            print("您的输入有误，请重新输入")
            continue
        # 得到的数据形成字典
        d={}
        d['name']=n
        d['age']=a
        d['score']=s
        #加到列表内
        L.append(d)
    return L

def print_student(L):
    print("+---------------+-----------+----------+")
    print("|     name      |    age    |  score   |")
    print("+---------------+-----------+----------+")
    for d in L:
        line = '|' + d['name'].center(15)
        line += '|' + str(d['age']).center(11)
        line += '|' + str(d['score']).center(10)
        line += '|'
        print(line)
    print("+---------------+-----------+----------+")
     
def remove_student(L):
    n=input('请输入要删除学生的姓名：')
    for i in range(len(L)):
        if L[i]['name']==n:
            del L[i]
            break
            print('您输入的姓名有误')
    
def modify_score(L):
    n = input("请输入学生的姓名:")
    s =int(input("请输入学生的成绩:"))
    for i in range(len(L)):
        if L[i]['name']==n:
            L[i]['score']=s
            break
            print('您输入的姓名有误')

def print_score_desc(L):
    def get_score(d):
        return d['score']
    lst=sorted(L,key=get_score,reverse=True)
    print_student(lst)

def print_score_asc(L):
    def get_score(d):
        return d['score']
    lst=sorted(L,key=get_score)
    lst=sorted(L,key=lambda d:d['score'])

    print_student(lst)
def print_age_desc(L):
    def get_age(d):
        return d['age']
    lst=sorted(L,key=get_age,reverse=True)
    print_student(lst)

def print_age_asc(L):
    def get_age(d):
        return d['age']
    lst=sorted(L,key=get_age)
    print_student(lst)