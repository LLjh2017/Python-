2018    09.20    星期四




异常(基础)  exception 
什么是错误 
  错误是指由于逻辑或语法等导致一个程序无法正常执行的问题

什么是异常
  异常是程序出错误时标识的一种状态
  当异常发生时,程序不会在向下执行,而转去调用此函数的地方
  待处理此错误并恢复为正常状态
  作用:
    用作信号,通知上层调用者有错误产生需要处理

try 语句:
  两种语法:
    try-except 语句
    try-finally 语句

try-except 语句
  语法:
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量名1]:
        异常处理语句1
    except 错误类型2 [as 变量名2]:
        异常处理语句2
    except (错误类型3,错误类型4) [as 变量名3]:
        异常处理语句3
    except:
        异常处理语句other
    else:  #(此子句只有在此try语句内没有发生异常时执行)
        未发生异常语句
    finally:
        最终语句
  作用:
    尝试捕获异常通知,将程序由异常流程转为正常流程并继续执行
  说明:
    except 子句可以有一个或多个,但至少要有一个

    def div_apple(n):
        print("有%d个苹果,您想分给几个人" % n)
        s=input("请输入人数：")
        count=int(s) # 可能触发ValueError错误
        result=n/count # ZeroDivisionError
        print("每个人分了%d个苹果" % result)
    try:
        div_apple(10)
    except ValueError:
        print("分苹果时发生值错误异常,已捕获并转为正常状态")
        print("把苹果拿回来")
    except ZeroDivisionError:
        print("没有人来拿苹果,苹果被收回")
    print("程序正常结束")

练习：
  写一个函数 get_score() 来获取学生输入的成绩(0~100)的数,如果
  用户输入的不是0~100的整数则返回0,否则返回输入的整数

# 方法1 在调用get_score时加入try语句
def get_score():
    s=int(input('请输入成绩(0~100):'))
    if not (0<=s<=100):
        return 0
    return s
try:
    score=get_score()
except ValueError:
    # 如果未获取学生信息,则此时学生成绩为0
    score=0
print("您输入的成绩是：",score)

# 在get_score函数内部加入try语句来进行错误处理
def get_score():
    try:
        s=int(input('请输入成绩(0~100):'))
    except ValueError:
        return 0
    if not (0<=s<=100):
        return 0
    return s
score=get_score()
print("您输入的成绩是：",score)



try-finally  语句
  语法:
    try:
        可能触发异常的语句
    finally:
        最终语句
  说明:
    finally 子句不可以省略
    一定不存在except 子句 
  作用:
    1.通常用try-finally语句来做触发异常时必须要处理的
      事情,无论异常是否发生,finally子句都会被执行
    2.try-finally 语句不会改变程序的(正常/异常)状态


raise 语句
  作用:
    触发一个错误,让程序进入异常状态
    发送错误通知给调用者
  语法：
    raise 异常类型
    # 或
    raise 异常对象
    # 或
    raise # 重新触发上一次异常

练习：
  写一个函数get_age() 用来获取一个人的年龄信息
  此函数规定只能输入1～140之间的整数，如果用户输入的数是
  其它的数值，则直接触发ValueError类型的错误
  如：
def get_age():
    age=int(input("请输入用户的年龄："))
    if age<1:
        raise ValueError("用户输入的年龄太小")
    if age>140:
        raise ValueError("用户输入的年龄太大")
    return age
try:
    age=get_age()
    print("用户输入的年龄是",age)
except ValueError as err:
    print('用户输入的不是1~140的数字，获取年龄失败')    


assert 语句(断言语句) 
  语法:
    assert 真值表达式, 错误数据(通常是字符串) 
  作用:
    当真值表达式为Flase时,用错误数据创建一个
    AssertionError类型的错误,并进入异常状态
  等同于:
    if bool(真值表达式)==False:
        raise AssertionError(错误数据)
  示例：
    def get_score():
        s=int(input("请输入学生的成绩(1~100)："))
        assert 1<=s<=100,"成绩超出范围"
        return s
    score=get_score()
    print("学生的成绩是：",score)    

小结:
  异常处理相关的语句:
    try-except 语句
      作用: 
        捕获异常通知,将程序由异常状态转为正常状态
    try-finally 语句
      作用:
        执行必须要执行的语句
    raise 语句
      作用:
        触发异常(抛出异常),让程序直接进入异常流程
    assert 语句
      作用:
        根据条件来触发AssertionError类的异常并
        进入异常流程
    
迭代器  Iterator
  什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指用iter(obj)函数返回的对象(实例)
    迭代器可以用next(it)函数获取可迭代对象的数据
迭代器函数:
  iter(iterable) 从可迭代对象中返回一个迭代器
  iterable必须是能提供一个迭代器的对象
  next(iterable) 从迭代器iterator中获取下一个
  记录,如果无法获取下一条记录,则触发StopIteration
  异常通知
  说明:
    迭代器只能往前取值,不会后退
  示例:
    L=[1,3,5,7]
    it=iter(L)  # 让iter函数从L中获取迭代器
                # it 绑定的是迭代器
    print(next(it))   # 1
    print(next(it))   # 3
    print(next(it))   # 5
    print(next(it))   # 7
    print(next(it))   # StopIteration(异常通知))
练习：
  有一个集合：
    s={'唐僧','悟空','八戒','沙僧'}
  用for语句遍历所有元素如下：
    for x in s:
        print(x)
    else:
        print("遍历结束")
  请将上面的for语句改写为while语句和迭代器实现
答案：
    s={'唐僧','悟空','八戒','沙僧'}
    it = iter(s)  # 获取迭代器
    while True:
        try:
            print(next(it))
        except StopIteration:
            print('遍历结束')
            break



练习:
  1.一个球从100米的高空落下,每次落地后反弹高度为原高度的一半
    在落下
    1.写程序算出皮球在第10次落地后反弹多高
    2.打印10次后 球总共经过多少米路程
答案：
# 计算第n次落地后反弹的高度
h=100
h1=0
def fn(x):
    h1=h/2**x
    print("球第%d次落地后的高度是：%f"%(x,h1))
fn(10)
# 老师的方法
def get_last_height(meter,times):
    '''根据小球的初始高度meter和次数，返回最后的返回高度'''
    for _ in range(times):
        meter/=2
    return meter 
print("球第10次落地后的高度是：",get_last_height(100,10))
def get_distance(meter,times):
    s=0 # 记录球的总行程
    for _ in range(times):
        # 记录下落时行程
        s+=meter
        # 算出反弹高度
        meter/=2
        # 记录反弹的行程
        s+=meter
    return s
print("球第10次落地后的路程是：",get_distance(100,10))

  2.分解质因数,输入一个正整数,分解质因数,如输入:90
    则打印 90=2*3*3*5
    质因数是指最小能被原数整除的素数,不包括1
答案：
def get_zhiyin_list(x):
    """此函数将返回包含x的所有质因数的列表"""
    L=[]
    while x>1:
        # 以下循环只找一个质因数,找到以后循环停止
        # 再返回上面的循环
        for i in range(2,x+1):
            if x%i==0: # 整除了此时i一定是质因数
                L.append(i)
                x=int(x/i)
                break
    return L
n=int(input("请输入一个大于零的整数："))
L=get_zhiyin_list(n)
s='*'.join(str(x) for x in L)
print(n,'=',s)