2018    09.14  星期五




函数变量

函数名是变量,他在创建时绑定一个函数

  示例：
    def fn():
        print("hello world")

    f1=fn
    print(f1)  # <function fn at 0x7f237cd02730>
    fn()  # hello world
    f1()  # hello world

一个函数可以作为另一个函数的实参传递

  示例：
    def f1():
        print("hello f1")
    def f2():
        print("hello f2")
    def fx(fn):
        print(fn)  # ??? <function f1 at 0x7f1e75182730>
        fn()    #  请问调用谁？  f1()

    fx(f1)

 
函数可以作为另一个函数的返回值
  示例：
    def get_function():
        s=input("请输入您要做的操作：")
        if s=='求最大':
            return max 
        if s=="求最小":
            return min 
        if s=='求和':
            return sum 
    L=[2,4,6,8,10]
    f=get_function()
    print(f(L))

函数的嵌套定义:
  函数嵌套定义是指一个函数里用def语句来创建其他
  函数的情况 

python的作用域:
  作用域也叫命名空间,是访问变量时查找变量名的范围空间

python的四个作用域:
    作用域                   英文             英文简写
局部作用域(函数内)            Local               L
外部嵌套函数作用域     Enclosing function local   E
函数定义所在模块作用域         Global              G
python内建模块的作用域    Builtin(Python)         B

变量名的查找规则
  在访问变量时,先查找本地变量,然后是包裹此函数外部的函数内部的
  变量,之后是全局变量,最后是内建变量
  即 L----->E----->G------>B
  在默认的情况下,变量名赋值会创建或者改变本地作用域内的变量

练习：
  得到下列程序运行的结果，思考为什么？
  L=[1,2]
  def f1():
      L=[3,4,5]
  f1()
  print(L)  # [1,2]
  def f2():
      L+=[3,4,5]
  f2()      # 出错
  print(L)
  def f3():
      L[:]=[3,4,5]
  f3()
  print(L)  # [3,4,5]

global 语句
  作用:
    告诉解释执行器,global语句声明的一个或多个变量,这些变量
    的作用域为模块级作用域(也称做全局变量)
    全局声明(global)将赋值语句的变量映射到模块文件内部的作用域
  语法:
    global 变量1，变量2，....
  示例：
  v=100
  def f1():
      global v
      v=200
  f1()
  print('v=',v)

  说明:
    1.全局变量如果要在函数内部被赋值,则必须经过全局声明,否则会
      被认为是局部变量
    2.全局变量在函数内部不经过全局声明就可以访问(取值)
    3.不能先声明局部变量,再用global声明为全局变量,此做法不符合
      规则
    4.global变量列表里的变量名不能出现在函数的形参列表里
练习：
  写一个函数hello,部分代码如下：
  count=0
  def hello(name):
      print('你好'，name)
      ...此处略
  当调用hello函数时，全局变量count自动做加1操作
  来记录hello被调用的次数
  如：
    hello('Tom')
    hello('Jerry')
    print('hello函数共被调用%d次：'%count)  
答案：
count=0 
def hello(name):
    print('你好',name)
    global count
    count+=1
hello('Tom')
hello('Jerry')
print('hello函数共被调用%d次：'%count) # 2



nonlocal语句
  作用:
    告诉解释执行器,nonlocal声明的变量不是局部变量,也不是全局变量
    而是外部嵌套函数内的变量
  语法:
    nonlocal 变量名1,变量名2,...
  示例：
  var=100
  def f1():
      var=200
      print("f1.var=",var) # 200
      def f2():
          nonlocal var # 修改嵌套变量var
          var=300
          print("f2.var=",var) # 300
      f2()
      print("f1.var=",var) # 300
  f1()
  print("全局的var=",var) # 100

  说明:
    1.nonlocal语句只能在嵌套函数内部进行使用
    2.对nonlocal变量列表内的变量赋值将对外部嵌套函数
      作用域内的变量进行操作
    3.当有两层或两层以上函数嵌套时,访问nonlocal变量只对
      最近的一层变量进行操作
    4.nonlocal语句变量列表里的变量名,不能出现在此函数
      的形参列表中
    
lambda 表达式 (又名匿名函数)
  作用:
    创建一个匿名函数对象,同def类似,但不提供函数名
  语法:
    lambda[函数形参列表]:表达式
  示例：
  def myadd(x,y):
      return x+y
  print(myadd(20,30))    # 50
  print(myadd(100,200))  # 300

  myadd=lambda x,y:x+y
  # 元组形参
  myadd=lambda *args:sum(args)
  print(myadd(20,30))    # 50
  print(myadd(100,200))  # 300

  说明:
    lambda表达式创建的函数只能包含一条表达式且直接返回
    表达式的值
    lambda 比函数简单,且可以随时创建和销毁,有利于减少
    程序的偶和度(各个程序关联的复杂程度叫偶和度)

练习：
  1.写一个lambda表达式：
    fx=lambda n:...
    此表达式创建的函数判断n这个数的2次方+1能否被5整除，如果能
    整除返回True,否则返回False
    如：
      print(fx(3))    # True
      print(fx(4))    # False
答案：
fx=lambda n:(n**2+1)%5==0
print(fx(3))
print(fx(4))
  
  2.写一个lambda表达式来创建函数，此函数返回两个型参变量
    的最大值
    def mymax(x,y):
        ....

    mymax=lambda...
    print(mymax(100,200))     #  200
    print(mymax("ABC","123")) #  ABC
练习：
mymax=lambda x,y:max(x,y)
print(mymax(100,200))     #  200
print(mymax("ABC","123"))

eval() 和 exec() 函数

eval 函数
  作用:
    把一个字符串当表达式来执行,返回表达式执行后的结果
  格式:
    eval(source,global=None,local=None)
  示例:
    s="1+2*3"  # 是个字符串
    v=eval(s)  #  v=7

exec 函数
  作用:
    把一个字符串当程序来执行
  格式:
    exec(source,global=None,local=None)


练习 
  1.看懂下面的程序在做什么
    def fx(f,x,y):
        print(f(x,y))
    fx((lambda a,b:a+b),100,200)
    fx((lambda a,b:a**b),3,4)

  2.给出一个整数n,写一个函数来计算
    1+2+3+4+....+n的值并返回结果
    要求用函数来做
    如:
      def mysum(n):
        .... 
      print(mysum(100))
      print(mysum(10))
答案：
  #方法1
  def mysum(n):
      he=0
      for i in range(1,n+1):
          he+=i
      return he
  print(mysum(100))
  print(mysum(10))
  #方法2
  def mysum(n):
      if n==1:
          return n
      return n+mysum(n-1)
  print(mysum(100))
  print(mysum(10))

  3.给出一个整数n,写一个函数来计算n!(n的阶乘)
    n!=1*2*3*4....*n 
    def myfac(n):
    ....
    print(myfac(5))
答案：
  # 方法1
  def myfac(n):
      ji=1
      for x in range(1,n+1):
          ji*=x
      return ji
  print(myfac(5))
  # 第二种 递归方法 
  def myfac(n):
      # 如果n为1则知道1的阶乘是1，直接返回
      if n==1:
          return 1
      # 否则，进入递推阶段等待下一个结果后再返回
      return n*myfac(n-1)
  print(myfac(5))
  
  4.给出一个整数n,写一个函数来计算
    1+2**2+3**3+...n**n
    (n给一个小点的数)
答案：
  #方法1
  def fn(n):
      he=0
      for i in range(1,n+1):
          he+=i**i
      return he
  print(fn(3))
  print(fn(5))
  #方法2
  def fn(n):
      return sum(map(lambda x:x**x,range(1,n+1)))
  print(fn(3))
  print(fn(5))
  # 方法3
  def f(n):
      l=[i**i for i in range(1,n+1)]
      return sum(l)
  print(f(3))
  print(f(5)) 
  
  5.写程序打印杨辉三角(只打印6层)
                1
               1 1
              1 2 1
             1 3 3 1
            1 4 6 4 1 
           1 5 10 10 5 1
答案：
# 第一步,制造相应的列表
def get_next_list(L):
    #用给定的一行L,返回下一行
    #如L为[1,2,1] 则返回[1,3,3,1]
    rl=[1]  # 最左边的1
    # 算中间的数字(循环获取从0开始的索引)
    for i in range(len(L)-1):
        v=L[i]+L[i+1]
        rl.append(v)
    rl.append(1)  # 最右边的1
    return rl 
# 第二步,生成全部的行,放到一个整体的列表中,并返回
def yh_list(n):  # n为行数
    #如果n为3,最终返回的列表是
    # [[1],[1,1],[1,2,1]]
    rl=[]
    L=[1]
    while len(rl)<n:
        rl.append(L)  #加入当前行
        #计算出下一行准备加入
        L=get_next_list(L) 
    return rl 
# 第三步,把杨辉三角的列表转为字符串列表
# 如果给定的列表是[[1],[1,1],[1,2,1]]
# 返回['1','1 1','1 2 1']
def get_yh_string(L):
    rl=[]
    for line in L:
        # line=[1,2,1]--->s='1 2 1'
        str_lst=[str(x) for x in line]
        s=' '.join(str_lst)  # s='1 2 1'
        # s=' '.join([str(x) for x in line]) # s='1 2 1'
        rl.append(s)
    return rl
# 打印杨辉三角
def print_yh_triangle(L):
    max_len=len(L[-1])
    for s in L:
        print(s.center(max_len))

L=yh_list(6)
SL=get_yh_string(L) 
print_yh_triangle(SL)

  6.实现带界面的学生信息管理系统的项目
    +--------------------------------+
    | 1)添加学生信息                   |
    | 2)显示学生信息                   | 
    | 3)删除学生信息                   |
    | 4)修改学生成绩                   |
    | q)退出                          |
    +--------------------------------+
    要求:用函数来实现,每个功能写一个函数与之相对应
答案：
def input_student():
    L=[] #创建一个列表用来保存学生信息的字典
    #循环输入学生姓名，年龄，成绩，姓名为空时结束输入
    while True:
        n=input('请输入学生姓名')
        if not n: #姓名为空时结束输入
            break
        a=int(input('请输入年龄：'))
        s=int(input('请输入成绩：'))
        # 得到的数据形成字典
        d={}
        d['name']=n
        d['age']=a
        d['score']=s
        #加到列表内
        L.append(d)
    return L

def print_student(L):
    print("+---------------+-----------+----------+")
    print("|     name      |    age    |  score   |")
    print("+---------------+-----------+----------+")
    for d in L:
        line = '|' + d['name'].center(15)
        line += '|' + str(d['age']).center(11)
        line += '|' + str(d['score']).center(10)
        line += '|'
        print(line)
    print("+---------------+-----------+----------+")
     
def remove_student(L):
    n=input('请输入要删除学生的姓名：')
    for i in range(len(L)):
        if L[i]['name']==n:
            del L[i]
            break
            print('您输入的姓名有误')
    
def modify_score(L):
    n = input("请输入学生的姓名:")
    s =int(input("请输入学生的成绩:"))
    for i in range(len(L)):
        if L[i]['name']==n:
            L[i]['score']=s
            break
            print('您输入的姓名有误')
            
def show_menu():
    print("+--------------------------------+")
    print('| 1)添加学生信息                 |')
    print('| 2)显示学生信息                 |') 
    print('| 3)删除学生信息                 |')
    print('| 4)修改学生成绩                 |')
    print('| q)退出                         |')
    print("+--------------------------------+")

def main():
    infos=[] #用于保存学生信息的列表
    while True:
        # 打印菜单
        show_menu()
        # print('1)添加学生信息')
        # print('2)显示学生信息')
        # print('3)删除学生信息')
        # print('4)修改学生成绩 ')
        # print('q)退出')
        s=input('请选择：')
        if s=='1':
            infos+=input_student()
        elif s=='2':
            print_student(infos)
        elif s=='3':
            remove_student(infos)
        elif s=='4':
            modify_score(infos)
        elif s=='q':
            break
main()