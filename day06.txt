2018  09.10   星期一



列表
删除数据：
L[1,5]=[]  

del 语句 
  用于删除列表的元素
  示例：
    del L[2]     # 删除单个元素
    del L[::2]   # 删除切片切出来的部分
练习：
  已知有列表：
    L=[3,5]
    用索引的切片等操作，将原列表的改变为：
    L=[1,2,3,4,5,6]
    将列表反转(先后顺序颠倒)，删除最后一个元素后
    打印此列表：
      print(L) [6,5,4,3,2]
答案：
L=[3,5]
L[1:1]=[4]
L[0:0]=[1,2]
L[5:5]=[6]
L=L[::-1]
del L[-1]
print(L)

python3常用于序列的函数：
  len(x)   返回序列长度
  max(x)   返回序列的最大值元素
  min(x)   返回序列的最小值元素
  sum(x)   返回序列中所有元素的和（元素必须是数值类型)
  any(x)   真值测试，如果序列中其中一个值为真值则返回True
  all(x)   真值测试，如果序列中所有值为真值才返回True

  示例：
    L=['one',2,'三']
    print(len(L))   #  3
    L=[8,3,6,2]
    min(L)          #  2
    sum(L)          #  19
    sum(L,19)=sum(L)+19 #  38
    all([True,1,0.01,[1,2,3],'hello']) # True
    all([None,False,1,0.01,[1,2,3],'hello']) # False
    any([None,False,0,0.0,[],'','hello']) # True
    any([None,False,0,0.0,[],'']) # False

练习：
  1.输入三个数，存于列表中，打印出这三个数的最大值，最小值
    平均数
答案：
a=int(input('输入第一个数:'))
b=int(input('输入第二个数:'))
c=int(input('输入第三个数:'))
L=[a,b,c]
print('最大值是：',max(L))
print('最小值是：',min(L))
print('平均值是：',sum(L)/len(L))

  2.写程序，让用户循环输入一些整数，当输入-1时结束输入，将
    这些整数存于列表L中
    1.打印您共输入了几个有效的数
    2.打印您输入的数的最大值是多少
    3.打印您输入的数的平均值是多少 
答案：
L=[]  #先创建一个列表，用来存放数据
while True:
    n=int(input('请输入不等于-1的整数：'))
    if n==-1:
        break
    # 将n放到列表中
    L+=[n]
print('您共输入了%d个有效的数'%len(L))
print('您输入的数的最大值是%d'%max(L))
print('您输入的整数的平均值是%f'%float(sum(L)/len(L)))



python3常用的列表的方法(method)：
  文档参见：
    python_base_docs_html/list.html 



深拷贝和浅拷贝：
  浅拷贝(shallow copy)：
    浅拷贝是指在对象复制过程中，只复制一层变量，不会复制
    深层变量绑定的对象的复制过程
  如：
    L=[3.1,3.2]
    L1=[1,2,L]
    L2=L1.copy()  # 浅拷贝
    print(L1)  # [1,2,[3.1,3.2]]
    print(L2)  # [1,2,[3.1,3.2]]
    L[0]=3.14
    print(L1)  # [1,2,[3.14,3.2]]
    print(L2)  # [1,2,[3.14,3.2]]
    print(L)   # [3.14,3.2]

  深拷贝 deep copy：
    import copy   #  导入复制模块
    L=[3.1,3.2]
    L1=[1,2,L]
    L2=copy.deepcopy(L1)   # 深拷贝
    print(L1)  # [1,2,[3.1,3.2]]
    print(L2)  # [1,2,[3.1,3.2]]
    L2[2][0]=3.14
    print(L1)  # [1,2,[3.1,3.2]]
    print(L2)  # [1,2,[3.14,3.2]]
    print(L)   # [3.1,3.2]
        

列表与字符串比较：
  1.都是序列,元素之间有先后顺序关系
  2.字符串是不可变的序列,列表是可变的序列
  3.字符串中每个元素只能存储字符(编码),而列表可以
    存储任意类型的元素
  4.列表和字符串都是可迭代对象
  
字符串文本解析方法 split 和 join 
  S.split(sep=None)将字符串,使用sep作用分隔符分割
  S字符串,返回分割后的字符串列表,当不给定参数时,用
  空白字符作为分隔符分割

  S.join(iterable) 用可迭代对象中的字符串中,
  返回一个中间用S进行分割的字符串
  示例：
    s='Beijing is capital'
    s.split()   ['Beijing','is','capital']
    s='小张,男,20'
    s.split(',')  ['小张','男','20']

    L=['小张','男','20']
    s2='#'.join(L)   
    s2='小张#男#20'
练习：
  有字符串
    s='hello'
    请生成如下字符串：
      'h e l l o'和'h-e-l-l-o'
>>> s='hello'
>>> ' '.join(s)
'h e l l o'
>>> '-'.join(s)
'h-e-l-l-o'
>>> 


列表推导式 list comprehension 
  列表推导式是用可迭代对象创建列表的表达式

  作用：
    用简易方法生成列表
  语法：
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]

  示例：
    以下生成一个数值为1～9的平方的列表
    L=[]
    for x in range(1,10):
        L.append(x**2)
        [1,4,9....81]
    用列表推导式
  # L=[x**2 for x in range(1,10)]
      [1,4,9....81]

练习：
  用列表推导式生成1～100内所有奇数的平方的列表
    L=[x**2 for x in range(1,100,2)]
  
  示例：
    以下生成一个数值为1～9的平方的列表(只保留偶数)
    L=[x**2 for x in range(1,10) if x%2==0]  # 只保留偶数
      [4,16,36,64]

练习：
  1.写程序，输入一个开始的整数用begin绑定
    输入一个结束的整数用end绑定
    将从begin开始到end(不包含end)结束的所有偶数存于列表中
    并打印(建议用列表推导式完成)
答案：
begin=int(input('输入一个开始的整数：'))
end=int(input('输入一个结束的整数：'))
L=[x for x in range(begin,end) if x%2==0]
print(L)

  2.写程序，让用户输入很多个整数(包含正整数和负整数)保存于列表L
    中，输入0结束输入，然后把列表L中的所有正数存于列表L1中，把
    列表L中所有负数存于列表L2中
    打印原列表L和正数列表L1和负数列表L2
答案：
L=[]
while True:
    n=int(input('输入不为0的整数：'))
    if n==0:
        break
    L.append(n)
L1=[x for x in L if x>0] # 正数
L2=[x for x in L if x<0] # 负数
print('原列表是：',L)
print('正数的列表是：',L1)
print('负数的列表是：',L2)



列表推导式的嵌套：
  [表达式1 
    for 变量1 in 可迭代对象1 if 真值表达式1
      for 变量2 in 可迭代对象2 if 真值表达式2
         ...]
  示例：
    将列表[10,20,30.]中的元素与列表[1,2,3]元素
    分别相加,将得到的元素放于一个列表中
    L=[x+y for x in [10,20,30] for y in [1,2,3]]
练习：
  用字符串'ABC'和'123'生成如下列表：
  ['A1','A2','A3','B1','B2','B3','C1','C2','C3']
答案：
  [x+y for x in 'ABC' for y in '123']

练习：
  1.已知有一个字符串：
    s='100,200,300,500,800'
    将其转化为数字组成的列表，列表内部为整数：
    L=[100,200,300,500,800]
答案：
#方法1
s='100,200,300,500,800'
L1=s.split(',')
L=[]
for x in L1:
    i=int(x)
    L.append(i)
print('L=',L)
#方法2
L=[int(x) for x in s.split(',')]
print('L=',L)

  2.用列表推导式生成如下列表：
    L=[1,4,7,10,...100]
答案：
  L=[x for x in range(1,101,3)]

  3.用列表推导式生成如下列表(思考题)
    [[1,2,3],[4,5,6],[7,8,9]]
答案：
#方法1
[[x，x+1,x+2] for x in range(1,8,3)]
#方法2
[[y for y in range(x,x+3)] for x in range(1,8,3)]
#方法3 改为for语句
L=[]
for x in range(1,8,3):
    #temp=[y for y in range(x,x+3)]
    temp=[]
    for y in range(x,x+3):
        temp.append(y)
    L.append(temp)



练习：
  1.有一些数字存在于列表中,如：
    L=[1,2,3,1,6,4,2,....98,82]
    1.将列表L中出现的数字存入到另一个列表L2中
      要求：
        重复出现多次的数字只在L2中保留一份(去重)
    2.将列表中出现两次的数字存在与列表L3中,在L3
      中只保留一份
答案：
L=[1,3,2,1,6,4,2,6,6,98,82]
L2=[]  # 准备存放出现过的数字
for x in L: # 将所有数遍历一遍
    # 如果是第一次出现，则添加到L2列表中
    if x not in L2:
        L2.append(x)
print('L2=',L2)
L3=[]
for x in L:
    #第一次出现，同时在L中出现2次，则加入到L3中
    if x not in L3 and L.count(x)==2:
        L3.append(x)
print('L3=',L3)

  2.计算出100以内的全部素数,将这些素数存在于列表中,然后打印出
    列表中的这些素数
答案：
#遍历1~100之间的数，如果这个数是素数，加入到一个列表中
L=[] #此容器准备加入素数
for x in range(1,101):
    #如果x是素数，则把x加入到L中，否则跳过
    isprime=True # 先假设x是素数
    #如果x不是素数，就把isprime值设为False
    if x<2:
        isprime=False
    else:
        for i in range(2,x):
            if x%i==0:  # 整除不是素数
                isprime=False
                break
    if isprime:  #一定为素数
        L.append(x)
print('L=',L)
#方法2
L=[]
for a in range(2,101):
    for b in range(2,a):
        if a%b==0:
            break
    eLse:
        L.append(a)
print('L=',L)

  3.生成前40个斐波那契(Fibonacci)数列中的数
    1   1   2   3   5   8   13   21  
    要求：将这些数保存于列表中,打印这些数
答案：
#方法1
L=[] # 空列表准备保存数据
a=0  # a代表当前一个数的前一个数
b=1  # b代表当前的斐波那契数
while len(L)<40:
    L.append(b)
    c=a+b # 求出下一个斐波那契数
    a=b
    b=c
print(L)

#方法2
L=[] # 空列表准备保存数据
a=0  # a代表当前一个数的前一个数
b=1  # b代表当前的斐波那契数
while len(L)<40:
    L.append(b)
    a,b=b,a+b # 序列赋值
print(L)

#方法3
L=[1,1]
while len(L)<40:
    L.append(L[-1]+L[-2])
print(L)   
    