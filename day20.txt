2018     09.29    星期六




对象的属性管理函数
  getattr(obj,name[,default])
  hasattr(obj,name)
  setattr(obj,name,value)
  delattr(obj,name)
示例：
class Dog:
    pass
d=Dog()
d.color='白色'
v=getattr(d,'color')   # 等同于 v = d.color
v=getattr(d,'kinds')   # 出错,没有d.kinds属性
v=getattr(d,'kinds','没有这个属性') # v='没有这个属性'
hasattr(d,'color')     # True
hasattr(d,'kinds')     # False
setattr(d,'kinds','京巴') # 等同于d.kinds='京巴'
hasattr(d,'kinds')  # True
delattr(d,'kinds')  # 等同于 del d.kinds
hasattr(d,'kinds')  # False


异常(高级)
  回顾:
    try-except
    try-finally
    raise
    assert

with语句
  语法:
    with 表达式1 [as 变量1],表达式2 [as 变量2]...:
        语句块
  作用:
    使用对资源进行访问的场合,确保使用过程中,不管是否发生异常
    都会执行必须的'清理'操作,并释放资源
      如:文件使用后自动关闭,线程中锁的自动获取和释放
         等(线程后面会学)
  说明:
    with语句并不会改变异常的状态(同try-finally类似)

环境管理器:
  1.类内有__enter__和__exit__实例方法的类创建的实例被称为
    环境管理器
  2.能够用with进行管理的对象必须是环境管理器
  3.__enter__方法将在进入with语句时被调用,且返回
    由as 变量 管理的对象
  4.__exit__方法将在离开with语句时被调用,且可以用形参来
    判断离开with语句时的状态
示例：
class A:
    '''此类的对象将可用于with语句中'''
    def __enter__(self):
        print('已经进入到with语句的内部')
        return self # 把自己返回由as 来绑定
    def __exit__(self,e_t,e_v,e_tb):
        '''e_t用来绑定异常类型
           e_v用来绑定异常对象
           e_tb用来绑定追踪对象
        '''
        if e_t is None:
            print('已正常离开with语句')
        else:
            print('是在出现异常时走异常流程离开的with语句')
with A() as a:
    print('这是with语句内部的print')
    int(input('输入整数'))


运算符重载 overload
  什么是运算符重载
    让自定义的类生成的对象(实例)能够使用运算符进行操作
  作用:
    让程序简洁易读
    对自定义的对象,将运算符赋予新的规则
  说明:
    运算符重载方法的参数有固定的含义,不建议改变运算符
    的原含义
    

算术运算符重载方法
      方法名            运算符和表达式     说明
__add__(self,rhs)       self+rhs        加法
__sub__(self,rhs)       self-rhs        减法
__mul__(self,rhs)       self*rhs        乘法
__truediv__(self,rhs)   self/rhs        除法
__floordiv__(self,rhs)  self//rhs       地板除
__mod__(self,rhs)       self%rhs        求余
__pow__(self,rhs)       self**rhs       幂运算
  (注 rhs  right hand side  右手边)
示例：
class MyNumber:
    def __init__(self,value):
        self.data=value
    def __repr__(self):
        return 'MyNumber(%d)'%self.data
    def __add__(self,other):
        '''加号运算符的重载方法'''
        v=self.data+other.data
        obj=MyNumber(v) # 创建一个新对象
        return obj
    def __sub__(self,rhs):
        '''减号运算符的重载方法'''
        return MyNumber(self.data-rhs.data)
n1=MyNumber(100)
n2=MyNumber(200)
n3=n1.__add__(n2) # 等同于n3=n1+n2
n4=n2-n1
print(n1,'+',n2,'=',n3)
print(n2,'-',n1,'=',n4)

练习：
  实现两个自定义的列表相加操作
class Mylist:
    def __init__(self,iterable=()):
        self.data=list(iterable)
    def __repr__(self):
        return 'Mylist(%s)'%self.data
    def __add__(self,rhs):
        return Mylist(self.data+rhs.data)
    def __mul__(self,rhs):
        return Mylist(self.data*rhs)
    def __rmul__(self,lhs):
        return Mylist(self.data*lhs)
l1=Mylist(range(1,4))
l2=Mylist([4,5,6])
print(l1)
print(l2)
l3=l1+l2
print(l3) # Mylist([1,2,3,4,5,6])
l4=l2+l1
print(l4) # Mylist([4,5,6,1,2,3])
l5=l1*3
print(l5) # Mylist([1,2,3,1,2,3,1,2,3])
l6=3*l1
print(l6) # Mylist([1,2,3,1,2,3,1,2,3])


反向算术运算符的重载:
  当运算符左侧为内建类型,右侧为自定义类型进行算术运算时会
  出现TypeErorr错误
  因无法修改内建类型的代码实现运算符重载,此时需要使用反向
  运算符的重载来完成重载
        方法名            运算符和表达式      说明
__radd__(self,lhs)        lhs+self         加法
__rsub__(self,lhs)        lhs-self         减法
__rmul__(self,lhs)        lhs*self         乘法
__rtruediv__(self,lhs)    lhs/self         除法
__rfloordiv__(self,lhs)   lhs//self       地板除
__rmod__(self,lhs)        lhs%self        求余
__rpow__(self,lhs)        lhs**self        幂运算
  (注 lhs  left hand side  左手边)

复合赋值算术运算符的重载
  以复合赋值算术运算符x+=y为例,此运算符会优先调用x.__iadd__(y)
  方法,如果没有__iadd__方法时会将复合赋值运算符拆解为x=x+y,然后
  调用x=x.__add__(y)方法,如果再不存在__add__方法,则会触发
  TypeErorr异常
    其它复合赋值运算符有相同的规则
      方法名            运算符和表达式       说明
__iadd__(self,rhs)       self+=rhs        加法
__isub__(self,rhs)       self-=rhs        减法
__imul__(self,rhs)       self*=rhs        乘法
__itruediv__(self,rhs)   self/=rhs        除法
__ifloordiv__(self,rhs)  self//=rhs       地板除
__imod__(self,rhs)       self%=rhs        求余
__ipow__(self,rhs)       self**=rhs       幂运算
  (注 rhs  right hand side  右手边)
示例：
class Mylist:
    def __init__(self,iterable=()):
        self.data=list(iterable)
    def __repr__(self):
        return 'Mylist(%s)'%self.data
    def __add__(self,rhs):
        print('__add__被调用')
        return Mylist(self.data+rhs.data)
    def __iadd__(self,rhs):
        print('__iadd__被调用')
        self.data.extend(rhs.data)
        return self
l1=Mylist(range(1,4))
l2=Mylist([4,5,6])
l1+=l2
print("l1=",l1) 
print("l2=",l2)

比较运算符的重载
  方法名                运算符和表达式     说明
__lt__(self,rhs)         self<rhs       小于
__le__(self,rhs)         self<=rhs      小于等于
__gt__(self,rhs)         self>rhs       大于
__ge__(self,rhs)         self>=rhs      大于等于
__eq__(self,rhs)         self==rhs      等于
__ne__(self,rhs)         self!=rhs      不等于
  注 比较运算符通常返回布尔值 True 或 False 

位运算符重载
  方法名               运算符和表达式     说明
__and__(self,rhs)      self & rhs      位于
__or__(self,rhs)       self | rhs      位或
__xor__(self,rhs)      self ^ rhs      位异或
__lshift__(self,rhs)   self << rhs     左移
__rshift__(self,rhs)   self >> rhs     右移

反向位运算符重载
  方法名               运算符和表达式        说明
__rand__(self,lhs)      lhs  & self      位于
__ror__(self,lhs)       lhs  | self      位或
__rxor__(self,lhs)      lhs  ^ self      位异或
__rlshift__(self,lhs)   lhs  << self     左移
__rrshift__(self,lhs)   lhs  >> self     右移

复合赋值位运算符重载
  方法名               运算符和表达式       说明
__iand__(self,rhs)      self &= rhs      位于
__ior__(self,rhs)       self |= rhs      位或
__ixor__(self,rhs)      self ^= rhs      位异或
__ilshift__(self,rhs)   self <<= rhs     左移
__irshift__(self,rhs)   self >>= rhs     右移

一元运算符的重载
 方法名               运算符和表达式      说明
__neg__(self)          -self           负号
__pos__(self)          +self           正号
__invert__(self)       ~self           取反

一元运算符的重载语法
  class  类名:
      def  __xxx__(self):
          ....
示例：
class Mylist:
    def __init__(self,iterable=()):
        self.data=list(iterable)
    def __repr__(self):
        return 'Mylist(%s)'%self.data
    def __neg__(self):
        '''重载负号运算符'''
        # l=[-x for x in self.data]
        # l=(-x for x in self.data)
        l=map(lambda x:-x,self.data)
        return Mylist(l)
    def __pos__(self):
        '''重载正号运算符'''
        l=[abs(x) for x in self.data]
        return Mylist(l)
l1=Mylist([1,-2,3,-4,5])
print(l1)
l2=-l1
print(l2)
l3=+l1
print(l3)


in/not in运算符重载
  方法格式
    def __contains__(self,e):
        ....
        e in self 
示例：
class Mylist:
    def __init__(self,iterable=()):
        self.data=list(iterable)
    def __repr__(self):
        return 'Mylist(%s)'%self.data
    def __contains__(self,e):
        '''重载in运算符'''
        return e in self.data
l1=Mylist([1,-2,3,-4,5])
print(type(l1)) # <class '__main__.Mylist'>
print(3 in l1) # True
print(3 not in l1) # False
print(4 not in l1) # True

索引和切片运算符的重载
重载方法：
      方法名           运算符和表达式     说明
__getitem__(self,i)    x=self[i]       取值
__setitem__(self,i,v)  self[i]=v       赋值
__delitem__(self,i)    del self[i]     删除
作用：
  让自定义的类型的对象能够支持索引和切片操作

示例：
class Mylist:
    def __init__(self,iterable=()):
        self.data=list(iterable)
    def __repr__(self):
        return 'Mylist(%s)'%self.data
    def __getitem__(self,i):
        print('__getitem__被调用,i=',i)
        return self.data[i]
    def __setitem__(self,i,v):
        print('__settitem__被调用,i=',i)
        self.data[i]=v
    def __delitem__(self,i):
        del self.data[i]
l1=Mylist([1,-2,3,-4,5])
x=l1[2] # x=l1.__getitem__(2)
print(x)
l1[1]=2.2
print(l1)
del l1[3]
print(l1)

slice构造函数
  作用：
    用于创建一个slice切片对象,此对象存储一个切片的起始值,终止值
    步长信息
  格式：
    slice(start=None,stop=None,step=None)
slice的属性
  s.start 切片的起始值,默认为None
  s.stop  切片的终止值,默认为None
  s.step  切片的步长,默认为None

特性属性 @property
  实现其它语言所拥有的getter和setter功能
  作用:
    用来模拟(虚拟)一个属性
    通过@property装饰器可以对模拟的属性赋值和取值加以控制
示例：
class Student:
    def __init__(self,s):
        self.__score=s
    @property
    def score(self):
        '''getter'''
        print('调用getter')
        return self.__score
    @score.setter
    def score(self,s):
        '''setter'''
        print('调用setter')
        assert 0<=s<=100,'成绩超出范围'
        self.__score=s
s1=Student(59)
print(s1.score)
# s1.score=9999   # 赋值
s1.score=90
print(s1.score)


练习：
  实现有序集合类OrderSet 能实现两个集合的交集&,并集|,补集-
  对称集合^ == !=等操作,功能与集合相同
  要求：集合内部用list存储
    如：
      s1=OrderSet([1,2,3,4])
      s2=OrderSet([3,4,5])
      print(s1&s2) # OrderSet([3,4])
      print(s1|s2) # OrderSet([1,2,3,4,5])
      print(s1^s2) # OrderSet([1,2,5])
      if OrderSet([1,2,3])!=s1:
          print('不相等')
      if 2 in s1:
          print('2在s1内')
      else:
          print('2不在s1内')
class OrderSet:
    def __init__(self,it=None):
        if it is None:
            self.data = []
        elif it:
            self.data = [x for x in it]
    def __repr__(self):
        return "OrderSet(%r)" % self.data

    def __and__(self, rhs):
        return OrderSet(
            (x for x in self.data if x in rhs.data)
        )

    def __or__(self, rhs):
        return OrderSet(
            self.data + [x for x in rhs.data
                         if x not in self.data]
        )

    def __sub__(self, rhs):
        return OrderSet(
            (x for x in self.data if x not in rhs.data)
        )

    def __xor__(self, rhs):
        return (self - rhs) | (rhs - self)

    def __eq__(self, rhs):
        return self.data == rhs.data

    def __ne__(self, rhs):
        return self.data != rhs.data

    def __contains__(self, ele):
        return ele in self.data

s1=OrderSet([1,2,3,4])
s2=OrderSet([3,4,5])
print(s1&s2) # OrderSet([3,4])
print(s1|s2) # OrderSet([1,2,3,4,5])
print(s1^s2) # OrderSet([1,2,5])
if OrderSet([1,2,3])!=s1:
    print('不相等')
if 2 in s1:
    print('2在s1内')
else:
    print('2不在s1内')